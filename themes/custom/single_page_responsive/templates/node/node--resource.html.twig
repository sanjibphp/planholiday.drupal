{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
<script type='text/javascript' src='http://s3.amazonaws.com/pharmacist/jwplayer.js'></script>
<script type='text/javascript' src='/sites/all/themes/apha/js/apha_tv_video.js'></script>
<script>jwplayer.key = "GMIGvuhtt83VK0fPn+qhtEdfOQCaWddwGkcHEA=="</script>
<script type='text/javascript' src='/sites/all/themes/apha/js/jquery.client.js'></script>

{% set preview_image = null %}


{% set preview_image = node.field_preview_image_url.value %}
{% set output = node.field_video_file_mp4_.value %}
{% set webm_file = node.field_video_file_webm_.value %}
{% set file_type = node.field_resource_file_type.value %}


{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}
{% set headerclass = 'short-header' %}
{% if node is empty %}

{% else %}
    {% if node.field_header_type.value and node.field_header_type.value == 2  %}
        {% set headerclass = 'full-header' %}
    {% endif %}
{% endif %}

<article{{ attributes.addClass(classes) }} id="node-{{ node.id }}">
  {{ title_prefix }}
  {% if not page or headerclass == 'short-header' %}
    <div class="share-block clearfix">
        {{ drupal_region('share') }}
        <div class="date-text">{{ node.field_article_date.value|date('U')|format_date('content_date_format') }}</div>
    </div>
    <h2{{ title_attributes }}>
      {{ label }}
    </h2>
  {% endif %}
  {{ title_suffix }}


  {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes.addClass('author') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('content') }}>

      {% if file_type == 'video' %}
          {{ content.field_resource_author|render }}
          {{ content.body|render }}
          {% if content.is_restricted is empty %}
            <div id="container{{ node.id }}">Loading the player ...</div>
          {% endif %}
      {% elseif file_type == 'file' %}
          {{ content.field_resource_author|render }}
          {{ content.body|render }}
          {% if content.is_restricted is empty %}
            <div class="resource-label">Resource:</div>
            {{ content.field_resource_file|render }}
            <!-- <div>
                <a href="/resource/{{ node.id() }}/get/{{ node.field_resource_file.entity.getFilename() }}" targe="_blank" title="Open file in new window">
                    {{ node.field_resource_file.entity.getFilename() }}
                </a>
            </div> -->
          {% endif %}
      {% elseif file_type == 'external_link' %}
          {{ content.field_resource_author|render }}
          {{ content.body|render }}
          {% if content.is_restricted is empty %}
            <div class="resource-label">Resource:</div>
            {{ content.field_resource_external_url|render }}
          {% endif %}
      {% else %}
          {{ content }}
      {% endif %}

    {% if node.field_byline.value or node.field_article_url.value %}
    <div class="footer-note">
        {{ content.field_byline|render }}
        {{ content.field_article_url|render }}
    </div>
    {% endif %}
  </div>

</article>

{% if file_type == 'video' and content.is_restricted is empty %}
<script type="text/javascript">

    if(!FlashDetect.installed){
        var videoTest = checkVideo(); //returns flash-for flash video, html5-for html5 video
        if (videoTest == "html5") {
            //play html5
            content = '<video id="my_video_1" class="video-js vjs-default-skin" controls preload="auto" width="100%" poster="{{ preview_image }}"  data-setup="{}">'+
                '<source src="http://media.pharmacist.com/{{ output }}" type="video/mp4">'+
                '<source src="{{ webm_file }}" type="video/webm">'+
                '</video>';

            jQuery('#container{{ node.id }}').html(content);
        }
        else {
            jQuery('#container{{ node.id }}').html('<a href="http://media.pharmacist.com/{{ output }}">Download</a>');
        }

    } else {
        if(jQuery.client.os == 'Mac' && jQuery.client.browser == 'Firefox'){
            if (videoTest == "html5") {
                //play html5
                content = '<video id="my_video_1" class="video-js vjs-default-skin" controls preload="auto" width="100%" poster="{{ preview_image }}">'+
                    '<source src="http://media.pharmacist.com/{{ output }}" type="video/mp4">'+
                    '<source src="{{ webm_file }}" type="video/webm">'+
                    '</video>';

                jQuery('#container{{ node.id }}').html(content);
            }
            else {
                jQuery('#container{{ node.id }}').html('<a href="http://media.pharmacist.com/{{ output }}">Download</a>');
            }
        } else {
            jwplayer('container{{ node.id }}').setup(
                {
                    'id': 'container{{ node.id }}',
                    'wmode': 'transparent',
                    'icons': 'true',
                    'allowscriptaccess': 'always',
                    'allownetworking': 'all',
                    'file': 'rtmp://streaming.pharmacist.com/cfx/st/mp4:{{ output }}',
                    'image': '{{ preview_image }}',


                    'abouttext': "American Pharmacists Association",
                    'aboutlink': "http://www.pharmacist.com/about",
                    'width': '100%',
                    'controlbar': 'bottom',
                    'dock': 'false',
                    'provider':'rtmp',
                    'streamer':'rtmp://streaming.pharmacist.com/cfx/st',
                    'modes': [
                        {type: 'flash', src: 'http://s3.amazonaws.com/pharmacist/jwplayer.flash.swf'},
                        {
                            type: 'html5',
                            config: {
                                'file': 'http://media.pharmacist.com/{{ output }}',
                                'provider': 'video'
                            }
                        },
                        {
                            type: 'download',
                            config: {
                                'file': 'http://media.pharmacist.com/{{ output }}',
                                'provider': 'video'
                            }
                        }
                    ]
                });
        }
    }
</script>
{% endif %}
